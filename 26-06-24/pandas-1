A **Pandas DataFrame** is a powerful data structure in Python used for data manipulation and analysis. It is a two-dimensional labeled data structure, similar to a table in a database, an Excel spreadsheet, or a data frame in R. Each column in a DataFrame can be of a different data type (e.g., integers, floats, strings), and the columns are typically named. Below, we'll demonstrate creating a DataFrame, inspecting its structure, and performing basic operations using the Pandas library.

### Creating a DataFrame
You can create a DataFrame in multiple ways, such as from a dictionary, a list of lists, or by reading a CSV file. Below are examples of these methods.

#### 1. Creating a DataFrame from a Dictionary
```
import pandas as pd

# Create a dictionary with sample data
data = {
    "Customer ID": ["C-26247", "C-35067", "C-34590", "C-16668", "C-12196"],
    "Name": ["Tandra Olszewski", "Jeannette Cha", "Keva Godfrey", "Elva Sackett", "Sade Constable"],
    "Gender": ["F", "F", "F", "M", "F"],
    "Age": [47, 57, 52, 65, 60],
    "Income (USD)": [3472.69, 1184.84, 1266.27, 1369.72, 1939.23]
}

# Create DataFrame
df = pd.DataFrame(data)
print(df)
```

#### 2. Creating a DataFrame from a List of Lists
```
# List of lists
data = [
    ["C-26247", "Tandra Olszewski", "F", 47, 3472.69],
    ["C-35067", "Jeannette Cha", "F", 57, 1184.84],
    ["C-34590", "Keva Godfrey", "F", 52, 1266.27],
    ["C-16668", "Elva Sackett", "M", 65, 1369.72],
    ["C-12196", "Sade Constable", "F", 60, 1939.23]
]

# Define column names
columns = ["Customer ID", "Name", "Gender", "Age", "Income (USD)"]

# Create DataFrame
df = pd.DataFrame(data, columns=columns)
print(df)
```

#### 3. Creating a DataFrame by Reading a CSV File
```
# Reading CSV file
df_from_csv = pd.read_csv("path/to/your/csvfile.csv")
print(df_from_csv.head())  # Display the first 5 rows
```

### Data Inspection
Once a DataFrame is created, inspecting its structure and contents is important for understanding the data and identifying any issues.

#### Basic Inspection Functions
1. **`df.info()`**: Provides a concise summary of the DataFrame, including the number of entries, columns, non-null values, and data types.
2. **`df.head(n)`**: Displays the first `n` rows of the DataFrame.
3. **`df.describe()`**: Generates descriptive statistics for numerical columns.
4. **`df.isnull().sum()`**: Returns the count of missing values in each column.
5. **`df.columns`**: Lists the column names.
6. **`df.dtypes`**: Shows the data types for each column.

```
# Check the structure and basic information of the DataFrame
print(df.info())

# Display the first 5 rows to inspect the data
print(df.head(5))

# Generate summary statistics for numerical columns
print(df.describe())

# Check for missing values
print("Missing values per column:")
print(df.isnull().sum())

# List column names
print(df.columns)

# Show data types for each column
print(df.dtypes)
```

### Data Exploration
Exploring the data helps identify patterns, distributions, and relationships between variables.

#### Exploration Functions
1. **`df["column"].value_counts()`**: Returns the count of unique values in a categorical column.
2. **`df["column"].unique()`**: Lists all unique values in a column.
3. **`df.corr()`**: Computes the correlation matrix for numerical columns.

```
# Get counts of unique values in the 'Gender' column
gender_counts = df["Gender"].value_counts()
print("Gender Counts:")
print(gender_counts)

# List all unique values in the 'Location' column
print("Unique Locations:")
print(df["Location"].unique())

# Compute the correlation matrix
print("Correlation Matrix:")
print(df.corr())
```

